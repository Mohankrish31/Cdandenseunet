# ------------------------ Imports ------------------------
import os
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Function

# ------------------------ Create folder for saved models ------------------------
os.makedirs("/content/Cdandenseunet/saved_model", exist_ok=True)

# ------------------------ Import your CDAN-DenseUNet model ------------------------
from Cdandenseunet.models.cdan_denseunet import CDANDenseUNet  

# ------------------------ Device ------------------------
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# ------------------------ Initialize model ------------------------
model = CDANDenseUNet(
    in_channels=3,
    base_channels=32
)

# ------------------------ Save model weights (optional) ------------------------
torch.save(model.state_dict(), "/content/Cdandenseunet/saved_model/cdan_denseunet.pt")
print("✅ Model weights saved to /content/Cdandenseunet/saved_model/cdan_denseunet.pt")

# ------------------------ Define model paths ------------------------
cdan_model_path = "/content/Cdandenseunet/saved_model/cdan_denseunet.pt"
ablation_model_path = "/content/Cdandenseunet/saved_model/ablation_model.pt"

# ------------------------ Load CDAN DenseUNet ------------------------
cdan_model = CDANDenseUNet(in_channels=3, base_channels=32).to(device)
if os.path.exists(cdan_model_path):
    cdan_model.load_state_dict(torch.load(cdan_model_path, map_location=device))
    print("✅ CDAN DenseUNet loaded successfully.")
else:
    print("⚠️ CDAN DenseUNet pretrained file not found. Starting from scratch.")

# ------------------------ Load Ablation model ------------------------
ablation_model = CDANDenseUNet(in_channels=3, base_channels=32).to(device)  # replace class if different
if os.path.exists(ablation_model_path):
    ablation_model.load_state_dict(torch.load(ablation_model_path, map_location=device))
    print("✅ Ablation model loaded successfully.")
else:
    print("⚠️ Ablation model pretrained file not found. Starting from scratch.")

# ------------------------ Optional: Test forward pass ------------------------
dummy_input = torch.randn(8, 3, 224, 224).to(device)
cdan_out = cdan_model(dummy_input)
ablation_out = ablation_model(dummy_input)
print("CDAN output shape:", cdan_out.shape)
print("Ablation output shape:", ablation_out.shape)
