import torch
from PIL import Image
import numpy as np
from models.cdan_denseunet import CDANDenseUNet
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# Initialize model
model = CDANDenseUNet(in_channels=3, base_channels=32).to(device)
model.load_state_dict(torch.load("cdan_denseunet_isp_weights.pth", map_location=device))
model.eval()
# Load and preprocess image
img = Image.open("low_light.png").convert("RGB").resize((224, 224))
img_tensor = torch.tensor(np.array(img)/255., dtype=torch.float32).permute(2,0,1).unsqueeze(0).to(device)
# Run inference
with torch.no_grad():
    enhanced = model(img_tensor)
# Convert to image and save
enhanced_img = (enhanced[0].permute(1,2,0).cpu().numpy() * 255).astype(np.uint8)
Image.fromarray(enhanced_img).save("enhanced.png")
