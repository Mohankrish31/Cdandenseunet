import torch
from torch.utils.data import DataLoader
from torchvision import transforms
import os
from dataset import LowLightDataset
from models.cdan_denseunet import CDANDenseUNet
dataset_root = "/content/cvccolondbsplit"
train_low_dir = os.path.join(dataset_root, "train", "low")
train_high_dir = os.path.join(dataset_root, "train", "high")
transform = transforms.ToTensor()
train_dataset = LowLightDataset(low_root=train_low_dir, high_root=train_high_dir, transform=transform)
train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = CDANDenseUNet(in_channels=3, base_channels=32).to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-4)
criterion = torch.nn.MSELoss()
num_epochs = 100
save_path = "/content/saved_model/cdan_denseunet_isp_weights.pth"
os.makedirs(os.path.dirname(save_path), exist_ok=True)
model.train()
for epoch in range(num_epochs):
    for low_img, high_img in train_loader:
        low_img, high_img = low_img.to(device), high_img.to(device)
        enhanced = model(low_img)
        loss = criterion(enhanced, high_img)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}")
    # Optional checkpoint every 10 epochs
    if (epoch+1) % 10 == 0:
        torch.save(model.state_dict(), f"/content/saved_model/epoch_{epoch+1}.pth")
torch.save(model.state_dict(), save_path)
print("âœ… Final model saved:", save_path)
