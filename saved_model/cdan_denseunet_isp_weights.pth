step 1: Prepare environment 
pip install torch torchvision lpips numpy Pillow tqdm matplotlib opencv-python scikit-image
import torch
from models.cdan_denseunet import CDANDenseUNet
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# Initialize model
model = CDANDenseUNet(in_channels=3, base_channels=32, growth_rate=12, output_range="01").to(device)
# Loss & optimizer
mse_loss_fn = nn.MSELoss()
edge_loss_fn = SobelEdgeLoss()
ssim_loss_fn = SSIMLoss()
# LPIPS model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
lpips_loss_fn = lpips.LPIPS(net='vgg').to(device)
# === Model & Optimizer ===
model = CDANDenseUNet(in_channels=3, base_channels=32).to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay)
# Training loop (simplified)
learning_rate = 1e-4
weight_decay = 1e-5
num_epochs = 100
batch_size = 8
early_stopping_patience = 10
model.train()
for epoch in range(num_epochs):
    for low_img, high_img in train_loader:  # use your DataLoader
        low_img, high_img = low_img.to(device), high_img.to(device)
        optimizer.zero_grad()
        output = model(low_img)
        loss = criterion(output, high_img)
        loss.backward()
        optimizer.step()
    print(f"Epoch {epoch+1}/{num_epochs} Loss: {loss.item():.4f}")
# Save model weights
torch.save(model.state_dict(), "/content/saved_model/cdan_denseunet_isp_weights.pth")
print("âœ… Model weights saved as .pth")

